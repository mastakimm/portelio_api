package com.backend.internal;

import lombok.Getter;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;

@Getter
public enum ErrorCode {
    BAD_CREDENTIALS(HttpStatus.FORBIDDEN),
    METHOD_NOT_ALLOWED(HttpStatus.METHOD_NOT_ALLOWED),
    AUTHENTICATION_REQUIRED(HttpStatus.UNAUTHORIZED),
    INVALID_ENDPOINT(HttpStatus.FORBIDDEN),
    INTERNAL_SERVER_ERROR(HttpStatus.INTERNAL_SERVER_ERROR),
    VALIDATION_FAILED(HttpStatus.BAD_REQUEST),
    EMAIL_ALREADY_TAKEN(HttpStatus.BAD_REQUEST),
    OLD_PASSWORD_INCORRECT(HttpStatus.BAD_REQUEST),
    INVALID_CHALLENGE(HttpStatus.BAD_REQUEST),
    MISSING_CHALLENGE(HttpStatus.BAD_REQUEST),
    USER_NOT_FOUND(HttpStatus.NOT_FOUND),
    DATA_INTEGRITY_VIOLATION(HttpStatus.INTERNAL_SERVER_ERROR),
    MAIL_SENDING_FAILED(HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_ALREADY_EXISTS(HttpStatus.CONFLICT),
    EXPIRED_TOKEN(HttpStatus.EXPECTATION_FAILED),
    INVALID_TOKEN(HttpStatus.BAD_REQUEST),
    EMAIL_NOT_VERIFIED(HttpStatus.UNAUTHORIZED),
    EMAIL_ALREADY_VERIFIED(HttpStatus.INTERNAL_SERVER_ERROR),
    INVALID_OR_EXPIRED_TOKEN(HttpStatus.EXPECTATION_FAILED),
    PREBUILD_PC_NOT_FOUND(HttpStatus.NOT_FOUND),
    COMPONENTS_PC_NOT_FOUND(HttpStatus.NOT_FOUND),
    COMPONENTS_PC_NOT_INSERT(HttpStatus.BAD_REQUEST),
    COMPONENTS_PC_NOT_DELETE(HttpStatus.BAD_REQUEST),
    ERROR_DURING_INSERT_PC_COMPONENT(HttpStatus.NOT_FOUND),
    ERROR_DURING_UPDATE_PC_COMPONENT(HttpStatus.NOT_FOUND),
    TYPE_NOT_FOUND(HttpStatus.NOT_FOUND),
    PRODUCT_SUB_CATEGORY_NOT_FOUND(HttpStatus.NOT_FOUND),
    CATEGORY_ALREADY_EXISTS(HttpStatus.CONFLICT),
    NOT_FOUND(HttpStatus.NOT_FOUND),
    ALREADY_EXISTS(HttpStatus.CONFLICT),
    COUNTRY_ALREADY_EXISTS(HttpStatus.CONFLICT),
    HISTORIC_NOT_SAVE(HttpStatus.BAD_REQUEST),
    HISTORIC_NOT_FOUND(HttpStatus.NOT_FOUND),
    INVALID_DATA(HttpStatus.BAD_REQUEST),
    CONVERSION_ERROR(HttpStatus.BAD_REQUEST),
    CUSTOMER_NOT_FOUND(HttpStatus.NOT_FOUND),
    PRODUCT_NOT_FOUND(HttpStatus.NOT_FOUND),
    INVALID_QUANTITY(HttpStatus.BAD_REQUEST),
    EXCEEDS_TOTAL_STOCK(HttpStatus.BAD_REQUEST),
    ERROR_CREATE_METHODE_PAYMENT(HttpStatus.NOT_FOUND),
    ERROR_GET_METHODE_PAYMENT(HttpStatus.NOT_FOUND),
    ERROR_CREATE_ORDER(HttpStatus.NOT_FOUND),
    ERROR_GET_ORDER(HttpStatus.NOT_FOUND);

    private final HttpStatusCode status;

    ErrorCode(HttpStatusCode status) {
        this.status = status;
    }

}
